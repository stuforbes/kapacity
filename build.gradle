/*
 * Copyright (c) 2020 com.stuforbes
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

buildscript {

    dependencies {
        classpath 'org.ajoberstar.grgit:grgit-gradle:3.1.1'
    }

    ext {
        kotlinVersion = "1.3.61"
        koHttpVersion = "0.11.1"
        konfigVersion = "1.6.10.0"
        commonsCliVersion = "1.4"

        jacksonVersion = "2.9.7"
        kafkaClientVersion = "2.4.0"

        slf4jVersion = "1.7.25"
        logbackVersion = "1.2.3"

        junitVersion = "5.6.0"
        mockkVersion = "1.9"
        assertJVersion = "3.11.1"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

plugins {
    id 'maven-publish'
//    id 'signing'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'net.researchgate.release' version '2.8.1'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    implementation "io.github.rybalkinsd:kohttp:$koHttpVersion"
    implementation "com.natpryce:konfig:$konfigVersion"
    implementation "commons-cli:commons-cli:$commonsCliVersion"

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "org.apache.kafka:kafka-clients:$kafkaClientVersion"

    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "ch.qos.logback:logback-core:$logbackVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}


compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

//signing {
//    sign configurations.archives
//}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'com.stuforbes.kapacity'
            artifactId 'kapacity-core'
            version "${getVersion()}"

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
//            project.tasks.signArchives.signatureFiles.each {
//                artifact(it) {
//                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
//                    if (matcher.find()) {
//                        classifier = matcher.group(1)
//                    } else {
//                        classifier = null
//                    }
//                    extension = 'jar.asc'
//                }
//            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username "$System.env.OSSRH_USERNAME"
                password "$System.env.OSSRH_PASSWORD"
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

static def getVersion() {
    def git = org.ajoberstar.grgit.Grgit.open()
    def tags = git.tag.list()

    if (tags.isEmpty()) {
        "1.0.0"
    } else {
        tags
                .collect { it.getName() }
                .last()
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Core library for the Kapacity framework'
            name 'Kapacity Core'
            url 'https://github.com/stuforbes/kapacity-core'
            organization {
                name 'com.stuforbes'
                url 'https://github.com/stuforbes'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/stuforbres/kapacity-core/issues'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'https://github.com/stuforbes/kapacity-core/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/stuforbes/kapacity'
                connection 'scm:git:git://github.com/stuforbes/kapacity-core.git'
                developerConnection 'scm:git:ssh://git@github.com:stuforbes/kapacity-core.git'
            }
            developers {
                developer {
                    name 'Stu Forbes'
                }
            }
        }
    }

}